# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CipherPublicParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CipherPublicParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCipherPublicParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CipherPublicParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CipherPublicParams
    def EncryptType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CipherPublicParams
    def PwParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.PWParams import PWParams
            obj = PWParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CipherPublicParams
    def DpParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.DPParams import DPParams
            obj = DPParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CipherPublicParams
    def DsParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.DSParams import DSParams
            obj = DSParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(4)
def CipherPublicParamsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEncryptType(builder, encryptType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(encryptType), 0)
def CipherPublicParamsAddEncryptType(builder, encryptType):
    """This method is deprecated. Please switch to AddEncryptType."""
    return AddEncryptType(builder, encryptType)
def AddPwParams(builder, pwParams): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pwParams), 0)
def CipherPublicParamsAddPwParams(builder, pwParams):
    """This method is deprecated. Please switch to AddPwParams."""
    return AddPwParams(builder, pwParams)
def AddDpParams(builder, dpParams): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dpParams), 0)
def CipherPublicParamsAddDpParams(builder, dpParams):
    """This method is deprecated. Please switch to AddDpParams."""
    return AddDpParams(builder, dpParams)
def AddDsParams(builder, dsParams): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dsParams), 0)
def CipherPublicParamsAddDsParams(builder, dsParams):
    """This method is deprecated. Please switch to AddDsParams."""
    return AddDsParams(builder, dsParams)
def End(builder): return builder.EndObject()
def CipherPublicParamsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)