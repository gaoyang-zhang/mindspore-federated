# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ResponseFLJob(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ResponseFLJob()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResponseFLJob(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ResponseFLJobBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x4A\x30", size_prefixed=size_prefixed)

    # ResponseFLJob
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ResponseFLJob
    def Retcode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ResponseFLJob
    def Reason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ResponseFLJob
    def Iteration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ResponseFLJob
    def IsSelected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ResponseFLJob
    def NextReqTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ResponseFLJob
    def FlPlanConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.FLPlan import FLPlan
            obj = FLPlan()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResponseFLJob
    def FeatureMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from mindspore_fl.schema.FeatureMap import FeatureMap
            obj = FeatureMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResponseFLJob
    def FeatureMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResponseFLJob
    def FeatureMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ResponseFLJob
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ResponseFLJob
    def UploadCompressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ResponseFLJob
    def UploadSparseRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ResponseFLJob
    def DownloadCompressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ResponseFLJob
    def CompressFeatureMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from mindspore_fl.schema.CompressFeatureMap import CompressFeatureMap
            obj = CompressFeatureMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ResponseFLJob
    def CompressFeatureMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResponseFLJob
    def CompressFeatureMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # ResponseFLJob
    def UnsupervisedEvalFlg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(13)
def ResponseFLJobStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRetcode(builder, retcode): builder.PrependInt32Slot(0, retcode, 0)
def ResponseFLJobAddRetcode(builder, retcode):
    """This method is deprecated. Please switch to AddRetcode."""
    return AddRetcode(builder, retcode)
def AddReason(builder, reason): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(reason), 0)
def ResponseFLJobAddReason(builder, reason):
    """This method is deprecated. Please switch to AddReason."""
    return AddReason(builder, reason)
def AddIteration(builder, iteration): builder.PrependInt32Slot(2, iteration, 0)
def ResponseFLJobAddIteration(builder, iteration):
    """This method is deprecated. Please switch to AddIteration."""
    return AddIteration(builder, iteration)
def AddIsSelected(builder, isSelected): builder.PrependBoolSlot(3, isSelected, 0)
def ResponseFLJobAddIsSelected(builder, isSelected):
    """This method is deprecated. Please switch to AddIsSelected."""
    return AddIsSelected(builder, isSelected)
def AddNextReqTime(builder, nextReqTime): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(nextReqTime), 0)
def ResponseFLJobAddNextReqTime(builder, nextReqTime):
    """This method is deprecated. Please switch to AddNextReqTime."""
    return AddNextReqTime(builder, nextReqTime)
def AddFlPlanConfig(builder, flPlanConfig): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(flPlanConfig), 0)
def ResponseFLJobAddFlPlanConfig(builder, flPlanConfig):
    """This method is deprecated. Please switch to AddFlPlanConfig."""
    return AddFlPlanConfig(builder, flPlanConfig)
def AddFeatureMap(builder, featureMap): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(featureMap), 0)
def ResponseFLJobAddFeatureMap(builder, featureMap):
    """This method is deprecated. Please switch to AddFeatureMap."""
    return AddFeatureMap(builder, featureMap)
def StartFeatureMapVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResponseFLJobStartFeatureMapVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFeatureMapVector(builder, numElems)
def AddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def ResponseFLJobAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)
def AddUploadCompressType(builder, uploadCompressType): builder.PrependInt8Slot(8, uploadCompressType, 0)
def ResponseFLJobAddUploadCompressType(builder, uploadCompressType):
    """This method is deprecated. Please switch to AddUploadCompressType."""
    return AddUploadCompressType(builder, uploadCompressType)
def AddUploadSparseRate(builder, uploadSparseRate): builder.PrependFloat32Slot(9, uploadSparseRate, 0.0)
def ResponseFLJobAddUploadSparseRate(builder, uploadSparseRate):
    """This method is deprecated. Please switch to AddUploadSparseRate."""
    return AddUploadSparseRate(builder, uploadSparseRate)
def AddDownloadCompressType(builder, downloadCompressType): builder.PrependInt8Slot(10, downloadCompressType, 0)
def ResponseFLJobAddDownloadCompressType(builder, downloadCompressType):
    """This method is deprecated. Please switch to AddDownloadCompressType."""
    return AddDownloadCompressType(builder, downloadCompressType)
def AddCompressFeatureMap(builder, compressFeatureMap): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(compressFeatureMap), 0)
def ResponseFLJobAddCompressFeatureMap(builder, compressFeatureMap):
    """This method is deprecated. Please switch to AddCompressFeatureMap."""
    return AddCompressFeatureMap(builder, compressFeatureMap)
def StartCompressFeatureMapVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResponseFLJobStartCompressFeatureMapVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCompressFeatureMapVector(builder, numElems)
def AddUnsupervisedEvalFlg(builder, unsupervisedEvalFlg): builder.PrependInt8Slot(12, unsupervisedEvalFlg, 0)
def ResponseFLJobAddUnsupervisedEvalFlg(builder, unsupervisedEvalFlg):
    """This method is deprecated. Please switch to AddUnsupervisedEvalFlg."""
    return AddUnsupervisedEvalFlg(builder, unsupervisedEvalFlg)
def End(builder): return builder.EndObject()
def ResponseFLJobEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
