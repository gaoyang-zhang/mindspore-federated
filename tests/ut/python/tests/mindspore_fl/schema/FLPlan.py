# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FLPlan(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FLPlan()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFLPlan(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FLPlanBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x4A\x30", size_prefixed=size_prefixed)

    # FLPlan
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FLPlan
    def ServerMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FLPlan
    def FlName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FLPlan
    def Iterations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FLPlan
    def Epochs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FLPlan
    def EarlyStop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.EarlyStop import EarlyStop
            obj = EarlyStop()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FLPlan
    def MiniBatch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FLPlan
    def Shuffle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FLPlan
    def Lr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FLPlan
    def Aggregation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.Aggregation import Aggregation
            obj = Aggregation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FLPlan
    def Metrics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FLPlan
    def MetricsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # FLPlan
    def MetricsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FLPlan
    def MetricsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # FLPlan
    def Cipher(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.CipherPublicParams import CipherPublicParams
            obj = CipherPublicParams()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(11)
def FLPlanStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddServerMode(builder, serverMode): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(serverMode), 0)
def FLPlanAddServerMode(builder, serverMode):
    """This method is deprecated. Please switch to AddServerMode."""
    return AddServerMode(builder, serverMode)
def AddFlName(builder, flName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(flName), 0)
def FLPlanAddFlName(builder, flName):
    """This method is deprecated. Please switch to AddFlName."""
    return AddFlName(builder, flName)
def AddIterations(builder, iterations): builder.PrependInt32Slot(2, iterations, 0)
def FLPlanAddIterations(builder, iterations):
    """This method is deprecated. Please switch to AddIterations."""
    return AddIterations(builder, iterations)
def AddEpochs(builder, epochs): builder.PrependInt32Slot(3, epochs, 0)
def FLPlanAddEpochs(builder, epochs):
    """This method is deprecated. Please switch to AddEpochs."""
    return AddEpochs(builder, epochs)
def AddEarlyStop(builder, earlyStop): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(earlyStop), 0)
def FLPlanAddEarlyStop(builder, earlyStop):
    """This method is deprecated. Please switch to AddEarlyStop."""
    return AddEarlyStop(builder, earlyStop)
def AddMiniBatch(builder, miniBatch): builder.PrependInt32Slot(5, miniBatch, 0)
def FLPlanAddMiniBatch(builder, miniBatch):
    """This method is deprecated. Please switch to AddMiniBatch."""
    return AddMiniBatch(builder, miniBatch)
def AddShuffle(builder, shuffle): builder.PrependBoolSlot(6, shuffle, 0)
def FLPlanAddShuffle(builder, shuffle):
    """This method is deprecated. Please switch to AddShuffle."""
    return AddShuffle(builder, shuffle)
def AddLr(builder, lr): builder.PrependFloat32Slot(7, lr, 0.0)
def FLPlanAddLr(builder, lr):
    """This method is deprecated. Please switch to AddLr."""
    return AddLr(builder, lr)
def AddAggregation(builder, aggregation): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(aggregation), 0)
def FLPlanAddAggregation(builder, aggregation):
    """This method is deprecated. Please switch to AddAggregation."""
    return AddAggregation(builder, aggregation)
def AddMetrics(builder, metrics): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(metrics), 0)
def FLPlanAddMetrics(builder, metrics):
    """This method is deprecated. Please switch to AddMetrics."""
    return AddMetrics(builder, metrics)
def StartMetricsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FLPlanStartMetricsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMetricsVector(builder, numElems)
def AddCipher(builder, cipher): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(cipher), 0)
def FLPlanAddCipher(builder, cipher):
    """This method is deprecated. Please switch to AddCipher."""
    return AddCipher(builder, cipher)
def End(builder): return builder.EndObject()
def FLPlanEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)