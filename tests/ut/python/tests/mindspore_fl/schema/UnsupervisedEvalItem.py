# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UnsupervisedEvalItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnsupervisedEvalItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnsupervisedEvalItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def UnsupervisedEvalItemBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x4A\x30", size_prefixed=size_prefixed)

    # UnsupervisedEvalItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UnsupervisedEvalItem
    def EvalName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UnsupervisedEvalItem
    def EvalData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UnsupervisedEvalItem
    def EvalDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # UnsupervisedEvalItem
    def EvalDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnsupervisedEvalItem
    def EvalDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def UnsupervisedEvalItemStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEvalName(builder, evalName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(evalName), 0)
def UnsupervisedEvalItemAddEvalName(builder, evalName):
    """This method is deprecated. Please switch to AddEvalName."""
    return AddEvalName(builder, evalName)
def AddEvalData(builder, evalData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(evalData), 0)
def UnsupervisedEvalItemAddEvalData(builder, evalData):
    """This method is deprecated. Please switch to AddEvalData."""
    return AddEvalData(builder, evalData)
def StartEvalDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def UnsupervisedEvalItemStartEvalDataVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEvalDataVector(builder, numElems)
def End(builder): return builder.EndObject()
def UnsupervisedEvalItemEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
