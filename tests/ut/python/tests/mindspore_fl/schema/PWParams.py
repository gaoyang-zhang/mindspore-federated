# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PWParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PWParams()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPWParams(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PWParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PWParams
    def T(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PWParams
    def P(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # PWParams
    def PAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # PWParams
    def PLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PWParams
    def PIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PWParams
    def G(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PWParams
    def Prime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # PWParams
    def PrimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # PWParams
    def PrimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PWParams
    def PrimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def PWParamsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddT(builder, t): builder.PrependInt32Slot(0, t, 0)
def PWParamsAddT(builder, t):
    """This method is deprecated. Please switch to AddT."""
    return AddT(builder, t)
def AddP(builder, p): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(p), 0)
def PWParamsAddP(builder, p):
    """This method is deprecated. Please switch to AddP."""
    return AddP(builder, p)
def StartPVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PWParamsStartPVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPVector(builder, numElems)
def AddG(builder, g): builder.PrependInt32Slot(2, g, 0)
def PWParamsAddG(builder, g):
    """This method is deprecated. Please switch to AddG."""
    return AddG(builder, g)
def AddPrime(builder, prime): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(prime), 0)
def PWParamsAddPrime(builder, prime):
    """This method is deprecated. Please switch to AddPrime."""
    return AddPrime(builder, prime)
def StartPrimeVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def PWParamsStartPrimeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPrimeVector(builder, numElems)
def End(builder): return builder.EndObject()
def PWParamsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)