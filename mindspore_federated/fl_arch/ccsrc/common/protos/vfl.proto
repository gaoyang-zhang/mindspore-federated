/**
 * Copyright 2022 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package mindspore.fl;

enum Role {
  VFL_LEADER = 0;
  VFL_FOLLOWER = 1;
}

message ExternalDataProto {
  string location = 1;
  int64 offset = 2;
  int64 length = 3;
  string checksum= 4;
}

message TensorProto {
  string name = 1;
  string ref_key = 2;
  string doc_string = 3;
  bytes raw_data = 4;
  string data_type = 5;

  repeated int64 dims = 6;
  repeated int64 min_dims = 7;
  repeated int64 max_dims = 8;

  ExternalDataProto external_data = 9;
  string compress_type = 10;
  float min_val = 11;
  float max_val = 12;
  int64 size = 13;
  int64 bit_num = 14;
  int64 offset = 15;
}

//encapsulate embeddings and grad-scales
message TensorListProto {
  string name = 1;
  repeated TensorProto tensors = 2;
  repeated TensorListProto tensor_list = 3;
  string send_addr = 4;
  string recv_addr = 5;
  int64 length = 6;
}

// encapsulate hyperparameters
message OptimizerHyperParameterProto {
  enum OptimizerType {
    Adam = 0;
    AdamWeightDecay = 1;
    AdamOffload = 2;
    AdaFactor = 3;
    AdaSumByDeltaWeightWrapCell = 4;
    AdaSumByGradWrapCell = 5;
    AdaMax = 6;
    Adadelta = 7;
    ASGD = 8;
    Adagrad = 9;
    FTRL = 10;
    Lamb = 11;
    LARS = 12;
    LazyAdam = 13;
    Momentum = 14;
    ProximalAdagrad = 15;
    Rprop = 16;
    RMSProp = 17;
    SGD = 18;
    thor = 19;
  }
  OptimizerType type = 1;
  message HyperParameter {
    string key = 1;
    bytes raw_data = 2;
    repeated bool bool_data = 3;
    repeated bytes string_data = 4;
    repeated int32 int32_data = 5;
    repeated int64 int64_data = 6;
    repeated uint32 uint32_data = 7; 
    repeated uint64 uint64_data = 8;
    repeated float float_data = 9;
    repeated double double_data = 10;
  }
  repeated HyperParameter hyper_parameter_list = 2;
}
